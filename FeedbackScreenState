/* 
* Copyright (c) 2014, MCvdBerg
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* 
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
* 
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
* 
* * Neither the name of [project] nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ 

package designreview;

import com.jme3.app.Application;
import com.jme3.app.SimpleApplication;
import com.jme3.app.state.AbstractAppState;
import com.jme3.app.state.AppStateManager;
import com.jme3.app.state.ScreenshotAppState;
import com.jme3.asset.AssetManager;
import com.jme3.font.BitmapFont;
import com.jme3.font.BitmapText;
import com.jme3.font.LineWrapMode;
import com.jme3.input.InputManager;
import com.jme3.renderer.ViewPort;
import com.jme3.scene.Node;
import de.lessvoid.nifty.Nifty;
import de.lessvoid.nifty.controls.TextField;
import de.lessvoid.nifty.screen.Screen;
import de.lessvoid.nifty.screen.ScreenController;

/**
 * @author: MCvdBerg
 */

public class FeedbackScreenState extends AbstractAppState
                                implements ScreenController {
    
    private SimpleApplication app;
    private AppStateManager stateManager;   
    private AssetManager assetManager;
    private InputManager inputManager;
    private Node rootNode;
    private Node guiNode;
    private Node localRootNode = new Node("Feedback Screen RootNode");
    private Node localGuiNode = new Node("Feedback Screen GuiNode");
    private ViewPort viewPort;
    public Nifty nifty;
    public Screen screen;

    // Array used to store the comments made for the objects clicked
    public String[] comments;
    public int number;
   
  
public FeedbackScreenState(SimpleApplication app){
    this.rootNode      = app.getRootNode();
    this.viewPort      = app.getViewPort();
    this.guiNode       = app.getGuiNode();
    this.assetManager  = app.getAssetManager();  
}
 
@Override
public void initialize(AppStateManager stateManager, Application app) {
    super.initialize(stateManager, app);
    this.app=(SimpleApplication) app;
    this.rootNode     = this.app.getRootNode();
    this.assetManager = this.app.getAssetManager();
    this.stateManager = this.app.getStateManager();
    this.inputManager = this.app.getInputManager();
    this.viewPort     = this.app.getViewPort();

    // Array for the comments to be made
    comments = new String[101]; // the number of comments is limited to 100
    number = 1;   
    
}
  
public void enterFeedback() {  
    // Get the text entered in the textfield
    String textField = screen.findNiftyControl("input", TextField.class).getText();    
    // Write the value of the textfield to the array "comments"
    comments[number]=textField;
    // Display the value just entered
    System.out.print(comments[number]);
    // Get the next number
    if (Main.app.getStateManager().getState(RunningScreenState.class).tempNumber <= number) {
        number = number + 1;
    } else {
        number = Main.app.getStateManager().getState(RunningScreenState.class).tempNumber;
    }
    // Clear the textfield
    screen.findNiftyControl("input", TextField.class).setText("");                
    // Turn running on/off
    Main.app.getStateManager().getState(RunningScreenState.class).isRunning = 
            !Main.app.getStateManager().getState(RunningScreenState.class).isRunning;
    // Return to the in-game screen
    nifty.gotoScreen("hud");
    Main.app.getStateManager().getState(FeedbackScreenState.class).setEnabled(false);
    Main.app.getStateManager().getState(RunningScreenState.class).setEnabled(true);
}

public void cancelAction() {      
        // Reset arrays
        Main.app.getStateManager().getState(RunningScreenState.class).object[number] = "";
        Main.app.getStateManager().getState(RunningScreenState.class).ifcName[number] = "";
        Main.app.getStateManager().getState(RunningScreenState.class).ifcId[number] = "";
        Main.app.getStateManager().getState(RunningScreenState.class).ifcGuid[number] = "";
        Main.app.getStateManager().getState(RunningScreenState.class).ifcType[number] = "";
        
        // Record that a comment is deleted
        comments[number] = "opmerking verwijderd";

        // Remove the mark
        Main.app.getStateManager().getState(RunningScreenState.class).localRootNode.detachChild(Main.app.getStateManager().getState(RunningScreenState.class).markspot[number]);
        
        // Go to the next number - based on whether a comment was changed or a new one was created
        if (Main.app.getStateManager().getState(RunningScreenState.class).tempNumber <= number) {
            number = number + 1;
        } else {
            number = Main.app.getStateManager().getState(RunningScreenState.class).tempNumber;
        }

        // Clear the textfield
        screen.findNiftyControl("input", TextField.class).setText("");  

        // Turn running on/off
        Main.app.getStateManager().getState(RunningScreenState.class).isRunning = 
                !Main.app.getStateManager().getState(RunningScreenState.class).isRunning;

        // Return to the in-game screen
        nifty.gotoScreen("hud");
        Main.app.getStateManager().getState(FeedbackScreenState.class).setEnabled(false);
        Main.app.getStateManager().getState(RunningScreenState.class).setEnabled(true);
}

@Override
public void update(float tpf) { }
 
//Nifty GUI ScreenControl methods
public void bind(Nifty nifty, Screen screen) {
    this.nifty = nifty;
    this.screen = screen;
}
    
public void onStartScreen() { 
    

}

public void onEndScreen() { }

@Override 
public void cleanup(){
    super.cleanup();
}
  
@Override
public void setEnabled(boolean enabled) {
    // Pause and unpause
    super.setEnabled(enabled);
      if(enabled){
          // Actions when this state is enabled
          rootNode.attachChild(localRootNode);
          guiNode.attachChild(localGuiNode);
           
         
            BitmapFont guiFont = assetManager.loadFont(
                    "Interface/Fonts/Default.fnt");
            BitmapText displaytext = new BitmapText(guiFont);
            displaytext.setSize(guiFont.getCharSet().getRenderedSize());
            displaytext.move(10, displaytext.getLineHeight() + 20,  0);
            displaytext.setText(Main.app.getStateManager().getState(RunningScreenState.class).ifcName[number]);                    
            displaytext.setLineWrapMode(LineWrapMode.Word);
            localGuiNode.attachChild(displaytext);
          
         
      } else {
          // Actions when this state is disabled         
          rootNode.detachChild(localRootNode);
          localGuiNode.detachAllChildren();
          guiNode.detachChild(localGuiNode);
          
          
    }
    
}
  
}
