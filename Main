/* 
* Copyright (c) 2014, MCvdBerg
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* 
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
* 
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
* 
* * Neither the name of [project] nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ 

package designreview;

import com.jme3.app.SimpleApplication;
import com.jme3.input.KeyInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.Trigger;
import com.jme3.niftygui.NiftyJmeDisplay;
import com.jme3.renderer.RenderManager;
import com.jme3.system.AppSettings;
import de.lessvoid.nifty.Nifty;
import de.lessvoid.nifty.screen.Screen;
import de.lessvoid.nifty.screen.ScreenController;

public class Main extends SimpleApplication 
                  implements ScreenController {

  private Trigger running_trigger = new KeyTrigger(KeyInput.KEY_ESCAPE);
  public StartScreenState startScreenState;
  public RunningScreenState runningScreenState;
  public FeedbackScreenState feedbackScreenState;
  public static SimpleApplication app;
  public Nifty nifty;
  public Screen screen;


// Start the application  
public static void main(String[] args) {
    AppSettings settings = new AppSettings(true);
    settings.setTitle("Design review"); // Window title
    //   settings.setSettingsDialogImage("Interface/logo_WB.jpg"); // Startup logo
 //   settings.setSettingsDialogImage("");
    settings.setVSync(true); // Capture the frame rate to the monitor's refresh rate
    settings.setSamples(4); // Anti-aliasing
    settings.setFrequency(60); // Refresh rate
    settings.setResolution(1280, 720); // Screen resolution
    app = new Main() {};
    //   app.setShowSettings(false); // Uncomment to disable settings screen at start up
    app.setSettings(settings);
    app.start();
}

    @Override
    public void simpleInitApp() {
    
    // Disable default display settings 
    setDisplayFps(false);
    setDisplayStatView(false);
    
    // Remove some default mappings
    inputManager.deleteMapping(SimpleApplication.INPUT_MAPPING_EXIT);
    inputManager.deleteMapping(SimpleApplication.INPUT_MAPPING_HIDE_STATS);
    
    // Register name-trigger pairs as mapping to the inputManager object
    inputManager.addMapping("Run evaluation", running_trigger);
    inputManager.addListener(actionListener, new String[]{"Run evaluation"});       

    // Invoke constructors to create new ScreenState objects
    startScreenState    = new StartScreenState(this);      
    runningScreenState  = new RunningScreenState(this);
    feedbackScreenState = new FeedbackScreenState(this);
     
    NiftyJmeDisplay niftyDisplay = new NiftyJmeDisplay( assetManager, 
                                                        inputManager, 
                                                        audioRenderer, 
                                                        guiViewPort);

    // Create a new NiftyGUI object /
    nifty = niftyDisplay.getNifty();
    
    // Register Nifty screencontrollers
    nifty.registerScreenController(startScreenState, 
                                   runningScreenState, 
                                   feedbackScreenState);
    
    // Read XML file and initialize custom ScreenController 
    nifty.fromXml("Interface/fields.xml", "start", this);
    
    // For debugging Nifty
    // nifty.setDebugOptionPanelColors(true);
    
    // Attach the Nifty display to the gui view port as a processor
    guiViewPort.addProcessor(niftyDisplay);
    
    // Attach all AppStates to the state manager
    stateManager.attach(startScreenState);
    stateManager.attach(runningScreenState);
    stateManager.attach(feedbackScreenState);
    
    // Application starts at start screen
    nifty.gotoScreen("start");
    startScreenState.setEnabled(true);
    runningScreenState.setEnabled(false);
    feedbackScreenState.setEnabled(false);

    // Disable the FlyCam
    flyCam.setDragToRotate(true);

    }
  
    //Nifty GUI ScreenControl methods
    public void bind(Nifty nifty, Screen screen) {
    this.nifty = nifty;
    this.screen = screen;
  }
   
  private ActionListener actionListener = new ActionListener() {
    public void onAction(String name, boolean isPressed, float tpf) {
      if (name.equals("Run evaluation") && !isPressed) {
        if (runningScreenState.isEnabled()){
                // Switch from hud to start               
                runningScreenState.setEnabled(false);
                startScreenState.setEnabled(true);
                nifty.gotoScreen("start");
                flyCam.setDragToRotate(true);               
                runningScreenState.isRunning = !runningScreenState.isRunning;
            }
            else if (startScreenState.isEnabled()) {
                // Switch from start to hud           
                startScreenState.setEnabled(false);
                runningScreenState.setEnabled(true);
                nifty.gotoScreen("hud");
                flyCam.setDragToRotate(false);
                runningScreenState.isRunning = !runningScreenState.isRunning;
            }
        }
      };
  };


    @Override
    public void simpleUpdate(float tpf) {
    }

    @Override
    public void simpleRender(RenderManager rm) {  
    }

    public void onStartScreen() {     
    }

    public void onEndScreen() {
    }
    
}
